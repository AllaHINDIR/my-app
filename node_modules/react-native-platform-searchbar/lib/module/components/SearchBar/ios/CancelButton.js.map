{"version":3,"sources":["CancelButton.tsx"],"names":["React","useState","useRef","useLayoutEffect","Text","StyleSheet","Animated","Easing","iosBlue","Button","CancelButton","text","visible","style","textStyle","onPress","width","setWidth","animationValue","Value","animation","timing","current","toValue","useNativeDriver","duration","delay","easing","inOut","ease","start","stop","opacity","transform","translateX","interpolate","inputRange","outputRange","styles","notVisible","e","nativeEvent","layout","cancelButtonText","create","color","fontSize","position","right"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,eAAlC,QAAyD,OAAzD;AACA,SACIC,IADJ,EAEIC,UAFJ,EAGIC,QAHJ,EAIIC,MAJJ,QAQO,cARP;AASA,SAASC,OAAT,QAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAUA,MAAMC,YAA6B,GAAG,CAAC;AACnCC,EAAAA,IADmC;AAEnCC,EAAAA,OAFmC;AAGnCC,EAAAA,KAHmC;AAInCC,EAAAA,SAJmC;AAKnCC,EAAAA;AALmC,CAAD,KAMhC;AACF,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,EAAlC;AACA,QAAMiB,cAAc,GAAGhB,MAAM,CAAC,IAAII,QAAQ,CAACa,KAAb,CAAmBP,OAAO,GAAG,CAAH,GAAO,CAAjC,CAAD,CAA7B;AAEAT,EAAAA,eAAe,CAAC,MAAM;AAClB,UAAMiB,SAAS,GAAGd,QAAQ,CAACe,MAAT,CAAgBH,cAAc,CAACI,OAA/B,EAAwC;AACtDC,MAAAA,OAAO,EAAEX,OAAO,GAAG,CAAH,GAAO,CAD+B;AAEtDY,MAAAA,eAAe,EAAE,IAFqC;AAGtDC,MAAAA,QAAQ,EAAEb,OAAO,GAAG,GAAH,GAAS,GAH4B;AAItDc,MAAAA,KAAK,EAAEd,OAAO,GAAG,EAAH,GAAQ,CAJgC;AAKtDe,MAAAA,MAAM,EAAEpB,MAAM,CAACqB,KAAP,CAAarB,MAAM,CAACsB,IAApB;AAL8C,KAAxC,CAAlB;AAOAT,IAAAA,SAAS,CAACU,KAAV;AACA,WAAOV,SAAS,CAACW,IAAjB;AACH,GAVc,EAUZ,CAACnB,OAAD,CAVY,CAAf;AAYA,sBACI,oBAAC,QAAD,CAAU,IAAV;AACI,IAAA,KAAK,EAAE,CACH;AACIoB,MAAAA,OAAO,EAAEd,cAAc,CAACI,OAD5B;AAEIW,MAAAA,SAAS,EAAE,CACP;AACIC,QAAAA,UAAU,EAAEhB,cAAc,CAACI,OAAf,CAAuBa,WAAvB,CAAmC;AAC3CC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD+B;AAE3CC,UAAAA,WAAW,EAAE,CAACrB,KAAK,IAAI,CAAV,EAAa,CAAb;AAF8B,SAAnC;AADhB,OADO;AAFf,KADG,EAYH,CAACJ,OAAD,IAAY0B,MAAM,CAACC,UAZhB,EAaH1B,KAbG,CADX;AAgBI,IAAA,QAAQ,EAAE2B,CAAC,IAAI;AACXvB,MAAAA,QAAQ,CAACuB,CAAC,CAACC,WAAF,CAAcC,MAAd,CAAqB1B,KAAtB,CAAR;AACH;AAlBL,kBAoBI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAED;AAAjB,kBACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACuB,MAAM,CAACK,gBAAR,EAA0B7B,SAA1B;AAAb,KAAoDH,IAApD,CADJ,CApBJ,CADJ;AA0BH,CAhDD;;AAkDA,MAAM2B,MAAM,GAAGjC,UAAU,CAACuC,MAAX,CAAkB;AAC7BD,EAAAA,gBAAgB,EAAE;AACdE,IAAAA,KAAK,EAAErC,OADO;AAEdsC,IAAAA,QAAQ,EAAE;AAFI,GADW;AAK7BP,EAAAA,UAAU,EAAE;AAAEQ,IAAAA,QAAQ,EAAE,UAAZ;AAAwBC,IAAAA,KAAK,EAAE;AAA/B;AALiB,CAAlB,CAAf;AAQA,eAAetC,YAAf","sourcesContent":["import React, { useState, useRef, useLayoutEffect } from 'react';\nimport {\n    Text,\n    StyleSheet,\n    Animated,\n    Easing,\n    StyleProp,\n    ViewStyle,\n    TextStyle,\n} from 'react-native';\nimport { iosBlue } from '../../../constants/colors';\nimport Button from '../../Button';\n\ntype Props = {\n    text: string;\n    visible: boolean;\n    onPress(): void;\n    style?: StyleProp<ViewStyle>;\n    textStyle?: StyleProp<TextStyle>;\n};\n\nconst CancelButton: React.FC<Props> = ({\n    text,\n    visible,\n    style,\n    textStyle,\n    onPress,\n}) => {\n    const [width, setWidth] = useState<number>();\n    const animationValue = useRef(new Animated.Value(visible ? 1 : 0));\n\n    useLayoutEffect(() => {\n        const animation = Animated.timing(animationValue.current, {\n            toValue: visible ? 1 : 0,\n            useNativeDriver: true,\n            duration: visible ? 250 : 200,\n            delay: visible ? 50 : 0,\n            easing: Easing.inOut(Easing.ease),\n        });\n        animation.start();\n        return animation.stop;\n    }, [visible]);\n\n    return (\n        <Animated.View\n            style={[\n                {\n                    opacity: animationValue.current,\n                    transform: [\n                        {\n                            translateX: animationValue.current.interpolate({\n                                inputRange: [0, 1],\n                                outputRange: [width || 1, 0],\n                            }),\n                        },\n                    ],\n                },\n                !visible && styles.notVisible,\n                style,\n            ]}\n            onLayout={e => {\n                setWidth(e.nativeEvent.layout.width);\n            }}\n        >\n            <Button onPress={onPress}>\n                <Text style={[styles.cancelButtonText, textStyle]}>{text}</Text>\n            </Button>\n        </Animated.View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    cancelButtonText: {\n        color: iosBlue,\n        fontSize: 16,\n    },\n    notVisible: { position: 'absolute', right: 0 },\n});\n\nexport default CancelButton;\n"]}