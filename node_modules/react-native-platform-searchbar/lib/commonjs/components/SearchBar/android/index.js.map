{"version":3,"sources":["index.tsx"],"names":["SearchBar","ref","value","theme","placeholderTextColor","androidLightPlaceholderGray","androidDarkPlaceholderGray","iconColor","selectionColor","leftIcon","style","inputStyle","children","onChangeText","onClear","props","styles","defaultStyles","darkStyles","inputRef","current","handleClear","wrapper","input","clearButton","clearIcon","undefined","StyleSheet","create","flexDirection","alignItems","backgroundColor","height","flex","paddingHorizontal","borderRadius","fontSize","shadowColor","shadowOffset","width","shadowOpacity","shadowRadius","elevation","position","marginLeft","marginRight","color"],"mappings":"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","sourcesContent":["import React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { View, TextInput, StyleSheet } from 'react-native';\nimport type { SearchBarProps } from '../../../types';\nimport SearchIcon from '../../icons/SearchIcon';\nimport {\n    androidLightPlaceholderGray,\n    androidDarkPlaceholderGray,\n} from '../../../constants/colors';\nimport ClearIcon from '../../icons/ClearIconAndroid';\nimport Button from '../../Button';\n\nconst SearchBar = forwardRef<TextInput, SearchBarProps>(\n    (\n        {\n            value,\n            theme = 'light',\n            placeholderTextColor = theme === 'light'\n                ? androidLightPlaceholderGray\n                : androidDarkPlaceholderGray,\n            iconColor = placeholderTextColor,\n            selectionColor = theme === 'light'\n                ? androidLightPlaceholderGray\n                : androidDarkPlaceholderGray,\n            leftIcon,\n            style,\n            inputStyle,\n            children,\n            onChangeText,\n            onClear,\n            ...props\n        },\n        ref\n    ) => {\n        const styles = theme === 'light' ? defaultStyles : darkStyles;\n\n        const inputRef = useRef<TextInput>(null);\n        useImperativeHandle(ref, () => inputRef.current!);\n\n        const handleClear = () => {\n            if (onClear) {\n                onClear();\n            }\n            onChangeText('');\n        };\n\n        return (\n            <View style={[styles.wrapper, style]}>\n                <TextInput\n                    ref={inputRef}\n                    value={value}\n                    selectionColor={selectionColor}\n                    placeholderTextColor={placeholderTextColor}\n                    onChangeText={onChangeText}\n                    clearButtonMode=\"never\"\n                    autoCorrect={false}\n                    {...props}\n                    style={[styles.input, inputStyle]}\n                />\n                <View pointerEvents=\"box-none\" style={styles.children}>\n                    {leftIcon ? (\n                        <View style={styles.leftIcon}>{leftIcon}</View>\n                    ) : (\n                        <SearchIcon color={iconColor} style={styles.leftIcon} />\n                    )}\n                    {children}\n                    {value ? (\n                        <Button\n                            onPress={handleClear}\n                            style={styles.clearButton}\n                        >\n                            <ClearIcon\n                                color={iconColor}\n                                style={styles.clearIcon}\n                            />\n                        </Button>\n                    ) : undefined}\n                </View>\n            </View>\n        );\n    }\n);\n\nconst defaultStyles = StyleSheet.create({\n    wrapper: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    input: {\n        backgroundColor: '#FFF',\n        height: 50,\n        flex: 1,\n        paddingHorizontal: 40,\n        borderRadius: 4,\n        fontSize: 16,\n        shadowColor: '#000',\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n        shadowOpacity: 0.22,\n        shadowRadius: 2.22,\n        elevation: 3,\n    },\n    children: {\n        position: 'absolute',\n        flexDirection: 'row',\n        height: 40,\n        width: '100%',\n        alignItems: 'center',\n        elevation: 3,\n    },\n    leftIcon: {\n        width: 16,\n        height: 16,\n        marginLeft: 10,\n        marginRight: 'auto',\n    },\n    clearButton: {\n        marginRight: 10,\n    },\n    clearIcon: {\n        width: 24,\n        height: 24,\n    },\n});\n\nconst darkStyles = StyleSheet.create({\n    ...defaultStyles,\n    input: {\n        ...defaultStyles.input,\n        backgroundColor: '#28282d',\n        color: '#FFF',\n    },\n});\n\nexport default SearchBar;\n"]}