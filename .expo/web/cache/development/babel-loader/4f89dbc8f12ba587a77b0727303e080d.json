{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\allah\\\\OneDrive\\\\Documents\\\\GitHub\\\\my-app\\\\Components\\\\Discussions.js\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ActionButton from 'react-native-action-button';\nimport { useIsFocused } from \"@react-navigation/native\";\nimport axios from 'axios';\nimport { Searchbar } from 'react-native-paper';\nimport Discussion from \"./Forum/Discussion\";\nimport Heading from \"./Forum/Heading\";\n\nfunction Discussions(props) {\n  var ensDis = [];\n  var idTheme = props.idTheme;\n  var titreTheme = props.titreTheme;\n  var idProfil = props.idProfil;\n  var Enable = false;\n  var isFocused = useIsFocused();\n\n  var wait = function wait(timeout) {\n    return new Promise(function (resolve) {\n      return setTimeout(resolve, timeout);\n    });\n  };\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      refreshing = _React$useState2[0],\n      setRefreshing = _React$useState2[1];\n\n  var onRefresh = React.useCallback(function () {\n    setRefreshing(true);\n    wait(100).then(function () {\n      setRefreshing(false);\n    });\n  }, []);\n  var url = props.url + 'topics/themes/' + idTheme;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      listDiscussions = _useState2[0],\n      setListDiscussions = _useState2[1];\n\n  useEffect(function () {\n    axios.get(url).then(function (reponse) {\n      setListDiscussions(reponse.data);\n    }).catch(function (erreur) {\n      console.log(erreur);\n    });\n  }, [isFocused, refreshing]);\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchQuery = _useState4[0],\n      setSearchQuery = _useState4[1];\n\n  function onChangeSearch(searchQuery) {\n    setSearchQuery(searchQuery);\n  }\n\n  for (var i = 0; i < listDiscussions.length; i++) {\n    if (listDiscussions[i].title.toUpperCase().includes(searchQuery.toUpperCase()) || listDiscussions[i].message.toUpperCase().includes(searchQuery.toUpperCase())) {\n      if (listDiscussions[i].creator._id == idProfil) {\n        Enable = true;\n      } else {\n        Enable = false;\n      }\n\n      ensDis.push(React.createElement(Discussion, {\n        key: listDiscussions[i]._id,\n        navigation: props.navigation,\n        discussion: listDiscussions[i],\n        idProfil: idProfil,\n        EnableReplay: true,\n        url: props.url,\n        idTheme: idTheme,\n        titreTheme: titreTheme,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'black'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, React.createElement(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, \" \", titreTheme), React.createElement(ScrollView, {\n    refreshControl: React.createElement(RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: onRefresh,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 35\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      backgroundColor: '#111111',\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, React.createElement(Searchbar, {\n    style: styles.searchBar,\n    inputStyle: styles.input,\n    iconColor: \"#ffffff\",\n    placeholder: \"Chercher ici...\",\n    placeholderTextColor: \"#ffffff\",\n    onChangeText: onChangeSearch,\n    value: searchQuery,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, ensDis)), React.createElement(ActionButton, {\n    buttonColor: \"teal\",\n    onPress: function onPress() {\n      console.log(\"nouvelle discussion\");\n      props.navigation.navigate('NewDiscussion', {\n        idTheme: props.idTheme,\n        titreTheme: props.titreTheme,\n        titre: \"\",\n        inputValue: \"\",\n        EnableBtn: false\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }));\n}\n\n;\nvar width = Dimensions.get('window').width;\nvar styles = StyleSheet.create({\n  container: {\n    width: width,\n    backgroundColor: '#000000',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  searchBar: {\n    width: width - 20,\n    backgroundColor: '#222222',\n    borderRadius: 10,\n    margin: 0,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  input: {\n    color: \"#ffffff\"\n  }\n});\nexport default Discussions;","map":{"version":3,"sources":["C:/Users/allah/OneDrive/Documents/GitHub/my-app/Components/Discussions.js"],"names":["React","useEffect","useState","ActionButton","useIsFocused","axios","Searchbar","Discussion","Heading","Discussions","props","ensDis","idTheme","titreTheme","idProfil","Enable","isFocused","wait","timeout","Promise","resolve","setTimeout","refreshing","setRefreshing","onRefresh","useCallback","then","url","listDiscussions","setListDiscussions","get","reponse","data","catch","erreur","console","log","searchQuery","setSearchQuery","onChangeSearch","i","length","title","toUpperCase","includes","message","creator","_id","push","navigation","flex","justifyContent","alignItems","backgroundColor","padding","styles","searchBar","input","container","navigate","titre","inputValue","EnableBtn","width","Dimensions","StyleSheet","create","borderRadius","margin","color"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { StyleSheet, ScrollView, RefreshControl, View, Dimensions } from 'react-native';\r\nimport ActionButton from 'react-native-action-button';\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\nimport axios from 'axios';\r\n\r\nimport { Searchbar } from 'react-native-paper';\r\nimport Discussion from './Forum/Discussion'\r\nimport Heading from './Forum/Heading'\r\n\r\nfunction Discussions(props) {\r\n  let ensDis = []\r\n  const idTheme = props.idTheme;\r\n  const titreTheme = props.titreTheme;\r\n  const idProfil = props.idProfil;\r\n  let Enable = false;\r\n  const isFocused = useIsFocused();\r\n\r\n  //pour rafraichir la page : \r\n  const wait = (timeout) => {\r\n    return new Promise(resolve => setTimeout(resolve, timeout));\r\n  }\r\n  const [refreshing, setRefreshing] = React.useState(false);\r\n\r\n  const onRefresh = React.useCallback(() => {\r\n    setRefreshing(true);\r\n    wait(100).then(() => {\r\n      setRefreshing(false);\r\n    });\r\n  }, []);\r\n\r\n  //pour la récupération des donnés\r\n  let url = props.url + 'topics/themes/' + idTheme;\r\n  const [listDiscussions, setListDiscussions] = useState([]);\r\n  useEffect(() => {\r\n    axios.get(url)\r\n      .then((reponse) => {\r\n        setListDiscussions(reponse.data);\r\n        //console.log(\"executé !\");\r\n      })\r\n      .catch((erreur) => {\r\n        console.log(erreur)\r\n      })\r\n  }, [isFocused, refreshing]);\r\n\r\n  //Search\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  function onChangeSearch(searchQuery) {\r\n    setSearchQuery(searchQuery);\r\n  }\r\n  //pour construire la liste des discussions\r\n  for (let i = 0; i < listDiscussions.length; i++) {\r\n    if (listDiscussions[i].title.toUpperCase().includes(searchQuery.toUpperCase()) || listDiscussions[i].message.toUpperCase().includes(searchQuery.toUpperCase())) {\r\n\r\n      if (listDiscussions[i].creator._id == idProfil) {\r\n        Enable = true;\r\n      } else {\r\n        Enable = false;\r\n      }\r\n      ensDis.push(\r\n        <Discussion\r\n          key={listDiscussions[i]._id}\r\n          navigation={props.navigation}\r\n          discussion={listDiscussions[i]}\r\n          idProfil={idProfil}\r\n          EnableReplay={true}\r\n          url={props.url}\r\n          idTheme={idTheme}\r\n          titreTheme={titreTheme}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'black' }}>\r\n      <Heading> {titreTheme}</Heading>\r\n\r\n      <ScrollView refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}>\r\n        <View style={{ backgroundColor: '#111111', flex: 1, justifyContent: 'center', alignItems: 'center', padding: 10 }}>\r\n          {/* <SBar /> */}\r\n          <Searchbar\r\n            style={styles.searchBar}\r\n            inputStyle={styles.input}\r\n            iconColor='#ffffff'\r\n            placeholder=\"Chercher ici...\"\r\n            placeholderTextColor=\"#ffffff\"\r\n            onChangeText={onChangeSearch}\r\n            value={searchQuery}\r\n          />\r\n        </View>\r\n        <View style={styles.container}>\r\n          {ensDis}\r\n        </View>\r\n\r\n      </ScrollView>\r\n      <ActionButton\r\n        buttonColor=\"teal\"\r\n        onPress={() => {\r\n          console.log(\"nouvelle discussion\")\r\n          props.navigation.navigate('NewDiscussion', { idTheme: props.idTheme, titreTheme: props.titreTheme, titre: \"\", inputValue: \"\", EnableBtn: false });\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n\r\n};\r\n\r\n\r\n\r\nconst width = Dimensions.get('window').width; //full width\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: width,\r\n    backgroundColor: '#000000',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  searchBar: {\r\n    width: width - 20,\r\n    backgroundColor: '#222222',\r\n    borderRadius: 10,\r\n    margin: 0,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n\r\n  },\r\n  input: {\r\n    color: \"#ffffff\",\r\n  }\r\n});\r\nexport default Discussions"]},"metadata":{},"sourceType":"module"}