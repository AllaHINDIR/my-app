{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\allah\\\\OneDrive\\\\Documents\\\\GitHub\\\\my-app\\\\node_modules\\\\react-native-action-button\\\\ActionButtonItem.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { shadowStyle, alignItemsMap, getTouchableComponent, isAndroid, touchableBackground, DEFAULT_ACTIVE_OPACITY } from \"./shared\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    WIDTH = _Dimensions$get.width;\n\nvar SHADOW_SPACE = 10;\nvar TEXT_HEIGHT = 22;\nvar TextTouchable = isAndroid ? TouchableNativeFeedback : TouchableWithoutFeedback;\n\nvar ActionButtonItem = function (_Component) {\n  _inherits(ActionButtonItem, _Component);\n\n  var _super = _createSuper(ActionButtonItem);\n\n  function ActionButtonItem() {\n    _classCallCheck(this, ActionButtonItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ActionButtonItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          size = _this$props.size,\n          position = _this$props.position,\n          verticalOrientation = _this$props.verticalOrientation,\n          hideShadow = _this$props.hideShadow,\n          spacing = _this$props.spacing;\n      if (!this.props.active) return null;\n      var animatedViewStyle = {\n        marginBottom: -SHADOW_SPACE,\n        alignItems: alignItemsMap[position],\n        opacity: this.props.anim,\n        transform: [{\n          translateY: this.props.anim.interpolate({\n            inputRange: [0, 1],\n            outputRange: [verticalOrientation === \"down\" ? -40 : 40, 0]\n          })\n        }]\n      };\n      var buttonStyle = {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        width: size,\n        height: size,\n        borderRadius: size / 2,\n        backgroundColor: this.props.buttonColor || this.props.btnColor\n      };\n      if (position !== \"center\") buttonStyle[position] = (this.props.parentSize - size) / 2;\n      var Touchable = getTouchableComponent(this.props.useNativeFeedback);\n      var parentStyle = isAndroid && this.props.fixNativeFeedbackRadius ? {\n        height: size,\n        marginBottom: spacing,\n        right: this.props.offsetX,\n        borderRadius: this.props.size / 2\n      } : {\n        paddingHorizontal: this.props.offsetX,\n        height: size + SHADOW_SPACE + spacing\n      };\n      return React.createElement(Animated.View, {\n        pointerEvents: \"box-none\",\n        style: [animatedViewStyle, parentStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }\n      }, React.createElement(Touchable, {\n        testID: this.props.testID,\n        accessibilityLabel: this.props.accessibilityLabel,\n        background: touchableBackground(this.props.nativeFeedbackRippleColor, this.props.fixNativeFeedbackRadius),\n        activeOpacity: this.props.activeOpacity || DEFAULT_ACTIVE_OPACITY,\n        onPress: this.props.onPress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: [buttonStyle, !hideShadow ? _objectSpread(_objectSpread({}, shadowStyle), this.props.shadowStyle) : null],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }\n      }, this.props.children))), this._renderTitle());\n    }\n  }, {\n    key: \"_renderTitle\",\n    value: function _renderTitle() {\n      if (!this.props.title) return null;\n      var _this$props2 = this.props,\n          textContainerStyle = _this$props2.textContainerStyle,\n          hideLabelShadow = _this$props2.hideLabelShadow,\n          offsetX = _this$props2.offsetX,\n          parentSize = _this$props2.parentSize,\n          size = _this$props2.size,\n          position = _this$props2.position,\n          spaceBetween = _this$props2.spaceBetween;\n      var offsetTop = Math.max(size / 2 - TEXT_HEIGHT / 2, 0);\n      var positionStyles = {\n        top: offsetTop\n      };\n      var hideShadow = hideLabelShadow === undefined ? this.props.hideShadow : hideLabelShadow;\n\n      if (position !== \"center\") {\n        positionStyles[position] = offsetX + (parentSize - size) / 2 + size + spaceBetween;\n      } else {\n        positionStyles.right = WIDTH / 2 + size / 2 + spaceBetween;\n      }\n\n      var textStyles = [styles.textContainer, positionStyles, !hideShadow && shadowStyle, textContainerStyle];\n      var title = React.isValidElement(this.props.title) ? this.props.title : React.createElement(Text, {\n        allowFontScaling: false,\n        style: [styles.text, this.props.textStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }\n      }, this.props.title);\n      return React.createElement(TextTouchable, {\n        background: touchableBackground(this.props.nativeFeedbackRippleColor, this.props.fixNativeFeedbackRadius),\n        activeOpacity: this.props.activeOpacity || DEFAULT_ACTIVE_OPACITY,\n        onPress: this.props.onPress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: textStyles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 9\n        }\n      }, title));\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        active: true,\n        spaceBetween: 15,\n        useNativeFeedback: true,\n        activeOpacity: DEFAULT_ACTIVE_OPACITY,\n        fixNativeFeedbackRadius: false,\n        nativeFeedbackRippleColor: \"rgba(255,255,255,0.75)\"\n      };\n    }\n  }, {\n    key: \"propTypes\",\n    get: function get() {\n      return {\n        active: PropTypes.bool,\n        useNativeFeedback: PropTypes.bool,\n        fixNativeFeedbackRadius: PropTypes.bool,\n        nativeFeedbackRippleColor: PropTypes.string,\n        activeOpacity: PropTypes.number\n      };\n    }\n  }]);\n\n  return ActionButtonItem;\n}(Component);\n\nexport { ActionButtonItem as default };\nvar styles = StyleSheet.create({\n  textContainer: {\n    position: \"absolute\",\n    paddingVertical: isAndroid ? 2 : 3,\n    paddingHorizontal: 8,\n    borderRadius: 3,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: \"#eee\",\n    backgroundColor: \"white\",\n    height: TEXT_HEIGHT\n  },\n  text: {\n    flex: 1,\n    fontSize: 12,\n    color: \"#444\"\n  }\n});","map":{"version":3,"sources":["C:/Users/allah/OneDrive/Documents/GitHub/my-app/node_modules/react-native-action-button/ActionButtonItem.js"],"names":["React","Component","PropTypes","shadowStyle","alignItemsMap","getTouchableComponent","isAndroid","touchableBackground","DEFAULT_ACTIVE_OPACITY","Dimensions","get","WIDTH","width","SHADOW_SPACE","TEXT_HEIGHT","TextTouchable","TouchableNativeFeedback","TouchableWithoutFeedback","ActionButtonItem","props","size","position","verticalOrientation","hideShadow","spacing","active","animatedViewStyle","marginBottom","alignItems","opacity","anim","transform","translateY","interpolate","inputRange","outputRange","buttonStyle","justifyContent","height","borderRadius","backgroundColor","buttonColor","btnColor","parentSize","Touchable","useNativeFeedback","parentStyle","fixNativeFeedbackRadius","right","offsetX","paddingHorizontal","testID","accessibilityLabel","nativeFeedbackRippleColor","activeOpacity","onPress","children","_renderTitle","title","textContainerStyle","hideLabelShadow","spaceBetween","offsetTop","Math","max","positionStyles","top","undefined","textStyles","styles","textContainer","isValidElement","text","textStyle","bool","string","number","StyleSheet","create","paddingVertical","borderWidth","hairlineWidth","borderColor","flex","fontSize","color"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;;;;;AAUA,SACEC,WADF,EAEEC,aAFF,EAGEC,qBAHF,EAIEC,SAJF,EAKEC,mBALF,EAMEC,sBANF;;AASA,sBAAyBC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAzB;AAAA,IAAeC,KAAf,mBAAQC,KAAR;;AACA,IAAMC,YAAY,GAAG,EAArB;AACA,IAAMC,WAAW,GAAG,EAApB;AAEA,IAAMC,aAAa,GAAGT,SAAS,GAC3BU,uBAD2B,GAE3BC,wBAFJ;;IAIqBC,gB;;;;;;;;;;;;;WAsBnB,kBAAS;AACP,wBAMI,KAAKC,KANT;AAAA,UACEC,IADF,eACEA,IADF;AAAA,UAEEC,QAFF,eAEEA,QAFF;AAAA,UAGEC,mBAHF,eAGEA,mBAHF;AAAA,UAIEC,UAJF,eAIEA,UAJF;AAAA,UAKEC,OALF,eAKEA,OALF;AAQA,UAAI,CAAC,KAAKL,KAAL,CAAWM,MAAhB,EAAwB,OAAO,IAAP;AAExB,UAAMC,iBAAiB,GAAG;AACxBC,QAAAA,YAAY,EAAE,CAACd,YADS;AAExBe,QAAAA,UAAU,EAAExB,aAAa,CAACiB,QAAD,CAFD;AAKxBQ,QAAAA,OAAO,EAAE,KAAKV,KAAL,CAAWW,IALI;AAMxBC,QAAAA,SAAS,EAAE,CACT;AACEC,UAAAA,UAAU,EAAE,KAAKb,KAAL,CAAWW,IAAX,CAAgBG,WAAhB,CAA4B;AACtCC,YAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD0B;AAEtCC,YAAAA,WAAW,EAAE,CAACb,mBAAmB,KAAK,MAAxB,GAAiC,CAAC,EAAlC,GAAuC,EAAxC,EAA4C,CAA5C;AAFyB,WAA5B;AADd,SADS;AANa,OAA1B;AAgBA,UAAMc,WAAW,GAAG;AAClBC,QAAAA,cAAc,EAAE,QADE;AAElBT,QAAAA,UAAU,EAAE,QAFM;AAGlBhB,QAAAA,KAAK,EAAEQ,IAHW;AAIlBkB,QAAAA,MAAM,EAAElB,IAJU;AAKlBmB,QAAAA,YAAY,EAAEnB,IAAI,GAAG,CALH;AAMlBoB,QAAAA,eAAe,EAAE,KAAKrB,KAAL,CAAWsB,WAAX,IAA0B,KAAKtB,KAAL,CAAWuB;AANpC,OAApB;AASA,UAAIrB,QAAQ,KAAK,QAAjB,EACEe,WAAW,CAACf,QAAD,CAAX,GAAwB,CAAC,KAAKF,KAAL,CAAWwB,UAAX,GAAwBvB,IAAzB,IAAiC,CAAzD;AAEF,UAAMwB,SAAS,GAAGvC,qBAAqB,CAAC,KAAKc,KAAL,CAAW0B,iBAAZ,CAAvC;AAEA,UAAMC,WAAW,GAAGxC,SAAS,IAC3B,KAAKa,KAAL,CAAW4B,uBADO,GAEhB;AACET,QAAAA,MAAM,EAAElB,IADV;AAEEO,QAAAA,YAAY,EAAEH,OAFhB;AAGEwB,QAAAA,KAAK,EAAE,KAAK7B,KAAL,CAAW8B,OAHpB;AAIEV,QAAAA,YAAY,EAAE,KAAKpB,KAAL,CAAWC,IAAX,GAAkB;AAJlC,OAFgB,GAQhB;AACE8B,QAAAA,iBAAiB,EAAE,KAAK/B,KAAL,CAAW8B,OADhC;AAEEX,QAAAA,MAAM,EAAElB,IAAI,GAAGP,YAAP,GAAsBW;AAFhC,OARJ;AAYA,aACE,oBAAC,QAAD,CAAU,IAAV;AACE,QAAA,aAAa,EAAC,UADhB;AAEE,QAAA,KAAK,EAAE,CAACE,iBAAD,EAAoBoB,WAApB,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AACE,QAAA,MAAM,EAAE,KAAK3B,KAAL,CAAWgC,MADrB;AAEE,QAAA,kBAAkB,EAAE,KAAKhC,KAAL,CAAWiC,kBAFjC;AAGE,QAAA,UAAU,EAAE7C,mBAAmB,CAC7B,KAAKY,KAAL,CAAWkC,yBADkB,EAE7B,KAAKlC,KAAL,CAAW4B,uBAFkB,CAHjC;AAOE,QAAA,aAAa,EAAE,KAAK5B,KAAL,CAAWmC,aAAX,IAA4B9C,sBAP7C;AAQE,QAAA,OAAO,EAAE,KAAKW,KAAL,CAAWoC,OARtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CACXnB,WADW,EAEX,CAACb,UAAD,mCAAkBpB,WAAlB,GAAkC,KAAKgB,KAAL,CAAWhB,WAA7C,IAA4D,IAFjD,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,KAAKgB,KAAL,CAAWqC,QAJd,CAVF,CADF,CAJF,EAuBG,KAAKC,YAAL,EAvBH,CADF;AA2BD;;;WAED,wBAAe;AACb,UAAI,CAAC,KAAKtC,KAAL,CAAWuC,KAAhB,EAAuB,OAAO,IAAP;AAEvB,yBAQI,KAAKvC,KART;AAAA,UACEwC,kBADF,gBACEA,kBADF;AAAA,UAEEC,eAFF,gBAEEA,eAFF;AAAA,UAGEX,OAHF,gBAGEA,OAHF;AAAA,UAIEN,UAJF,gBAIEA,UAJF;AAAA,UAKEvB,IALF,gBAKEA,IALF;AAAA,UAMEC,QANF,gBAMEA,QANF;AAAA,UAOEwC,YAPF,gBAOEA,YAPF;AASA,UAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,CAAS5C,IAAI,GAAG,CAAP,GAAWN,WAAW,GAAG,CAAlC,EAAqC,CAArC,CAAlB;AACA,UAAMmD,cAAc,GAAG;AAAEC,QAAAA,GAAG,EAAEJ;AAAP,OAAvB;AACA,UAAMvC,UAAU,GAAGqC,eAAe,KAAKO,SAApB,GACf,KAAKhD,KAAL,CAAWI,UADI,GAEfqC,eAFJ;;AAIA,UAAIvC,QAAQ,KAAK,QAAjB,EAA2B;AACzB4C,QAAAA,cAAc,CAAC5C,QAAD,CAAd,GACE4B,OAAO,GAAG,CAACN,UAAU,GAAGvB,IAAd,IAAsB,CAAhC,GAAoCA,IAApC,GAA2CyC,YAD7C;AAED,OAHD,MAGO;AACLI,QAAAA,cAAc,CAACjB,KAAf,GAAuBrC,KAAK,GAAG,CAAR,GAAYS,IAAI,GAAG,CAAnB,GAAuByC,YAA9C;AACD;;AAED,UAAMO,UAAU,GAAG,CACjBC,MAAM,CAACC,aADU,EAEjBL,cAFiB,EAGjB,CAAC1C,UAAD,IAAepB,WAHE,EAIjBwD,kBAJiB,CAAnB;AAOA,UAAMD,KAAK,GACT1D,KAAK,CAACuE,cAAN,CAAqB,KAAKpD,KAAL,CAAWuC,KAAhC,IACE,KAAKvC,KAAL,CAAWuC,KADb,GAGE,oBAAC,IAAD;AACE,QAAA,gBAAgB,EAAE,KADpB;AAEE,QAAA,KAAK,EAAE,CAACW,MAAM,CAACG,IAAR,EAAc,KAAKrD,KAAL,CAAWsD,SAAzB,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,KAAKtD,KAAL,CAAWuC,KAJd,CAJJ;AAaA,aACE,oBAAC,aAAD;AACE,QAAA,UAAU,EAAEnD,mBAAmB,CAC7B,KAAKY,KAAL,CAAWkC,yBADkB,EAE7B,KAAKlC,KAAL,CAAW4B,uBAFkB,CADjC;AAKE,QAAA,aAAa,EAAE,KAAK5B,KAAL,CAAWmC,aAAX,IAA4B9C,sBAL7C;AAME,QAAA,OAAO,EAAE,KAAKW,KAAL,CAAWoC,OANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEa,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGV,KADH,CARF,CADF;AAcD;;;SAlKD,eAA0B;AACxB,aAAO;AACLjC,QAAAA,MAAM,EAAE,IADH;AAELoC,QAAAA,YAAY,EAAE,EAFT;AAGLhB,QAAAA,iBAAiB,EAAE,IAHd;AAILS,QAAAA,aAAa,EAAE9C,sBAJV;AAKLuC,QAAAA,uBAAuB,EAAE,KALpB;AAMLM,QAAAA,yBAAyB,EAAE;AANtB,OAAP;AAQD;;;SAED,eAAuB;AACrB,aAAO;AACL5B,QAAAA,MAAM,EAAEvB,SAAS,CAACwE,IADb;AAEL7B,QAAAA,iBAAiB,EAAE3C,SAAS,CAACwE,IAFxB;AAGL3B,QAAAA,uBAAuB,EAAE7C,SAAS,CAACwE,IAH9B;AAILrB,QAAAA,yBAAyB,EAAEnD,SAAS,CAACyE,MAJhC;AAKLrB,QAAAA,aAAa,EAAEpD,SAAS,CAAC0E;AALpB,OAAP;AAOD;;;;EApB2C3E,S;;SAAzBiB,gB;AAsKrB,IAAMmD,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,aAAa,EAAE;AACbjD,IAAAA,QAAQ,EAAE,UADG;AAEb0D,IAAAA,eAAe,EAAEzE,SAAS,GAAG,CAAH,GAAO,CAFpB;AAGb4C,IAAAA,iBAAiB,EAAE,CAHN;AAIbX,IAAAA,YAAY,EAAE,CAJD;AAKbyC,IAAAA,WAAW,EAAEH,UAAU,CAACI,aALX;AAMbC,IAAAA,WAAW,EAAE,MANA;AAOb1C,IAAAA,eAAe,EAAE,OAPJ;AAQbF,IAAAA,MAAM,EAAExB;AARK,GADgB;AAW/B0D,EAAAA,IAAI,EAAE;AACJW,IAAAA,IAAI,EAAE,CADF;AAEJC,IAAAA,QAAQ,EAAE,EAFN;AAGJC,IAAAA,KAAK,EAAE;AAHH;AAXyB,CAAlB,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  Animated,\r\n  TouchableNativeFeedback,\r\n  TouchableWithoutFeedback,\r\n  Dimensions,\r\n} from \"react-native\";\r\nimport {\r\n  shadowStyle,\r\n  alignItemsMap,\r\n  getTouchableComponent,\r\n  isAndroid,\r\n  touchableBackground,\r\n  DEFAULT_ACTIVE_OPACITY\r\n} from \"./shared\";\r\n\r\nconst { width: WIDTH } = Dimensions.get(\"window\");\r\nconst SHADOW_SPACE = 10;\r\nconst TEXT_HEIGHT = 22;\r\n\r\nconst TextTouchable = isAndroid\r\n  ? TouchableNativeFeedback\r\n  : TouchableWithoutFeedback;\r\n\r\nexport default class ActionButtonItem extends Component {\r\n  static get defaultProps() {\r\n    return {\r\n      active: true,\r\n      spaceBetween: 15,\r\n      useNativeFeedback: true,\r\n      activeOpacity: DEFAULT_ACTIVE_OPACITY,\r\n      fixNativeFeedbackRadius: false,\r\n      nativeFeedbackRippleColor: \"rgba(255,255,255,0.75)\"\r\n    };\r\n  }\r\n\r\n  static get propTypes() {\r\n    return {\r\n      active: PropTypes.bool,\r\n      useNativeFeedback: PropTypes.bool,\r\n      fixNativeFeedbackRadius: PropTypes.bool,\r\n      nativeFeedbackRippleColor: PropTypes.string,\r\n      activeOpacity: PropTypes.number\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      size,\r\n      position,\r\n      verticalOrientation,\r\n      hideShadow,\r\n      spacing\r\n    } = this.props;\r\n\r\n    if (!this.props.active) return null;\r\n\r\n    const animatedViewStyle = {\r\n      marginBottom: -SHADOW_SPACE,\r\n      alignItems: alignItemsMap[position],\r\n\r\n      // backgroundColor: this.props.buttonColor,\r\n      opacity: this.props.anim,\r\n      transform: [\r\n        {\r\n          translateY: this.props.anim.interpolate({\r\n            inputRange: [0, 1],\r\n            outputRange: [verticalOrientation === \"down\" ? -40 : 40, 0]\r\n          })\r\n        }\r\n      ]\r\n    };\r\n\r\n    const buttonStyle = {\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      width: size,\r\n      height: size,\r\n      borderRadius: size / 2,\r\n      backgroundColor: this.props.buttonColor || this.props.btnColor\r\n    };\r\n\r\n    if (position !== \"center\")\r\n      buttonStyle[position] = (this.props.parentSize - size) / 2;\r\n\r\n    const Touchable = getTouchableComponent(this.props.useNativeFeedback);\r\n\r\n    const parentStyle = isAndroid &&\r\n      this.props.fixNativeFeedbackRadius\r\n      ? {\r\n          height: size,\r\n          marginBottom: spacing,\r\n          right: this.props.offsetX,\r\n          borderRadius: this.props.size / 2\r\n        }\r\n      : {\r\n          paddingHorizontal: this.props.offsetX,\r\n          height: size + SHADOW_SPACE + spacing\r\n        };\r\n    return (\r\n      <Animated.View\r\n        pointerEvents=\"box-none\"\r\n        style={[animatedViewStyle, parentStyle]}\r\n      >\r\n        <View>\r\n          <Touchable\r\n            testID={this.props.testID}\r\n            accessibilityLabel={this.props.accessibilityLabel}\r\n            background={touchableBackground(\r\n              this.props.nativeFeedbackRippleColor,\r\n              this.props.fixNativeFeedbackRadius\r\n            )}\r\n            activeOpacity={this.props.activeOpacity || DEFAULT_ACTIVE_OPACITY}\r\n            onPress={this.props.onPress}\r\n          >\r\n            <View style={[\r\n              buttonStyle,\r\n              !hideShadow ? {...shadowStyle, ...this.props.shadowStyle} : null\r\n            ]}>\r\n              {this.props.children}\r\n            </View>\r\n          </Touchable>\r\n        </View>\r\n        {this._renderTitle()}\r\n      </Animated.View>\r\n    );\r\n  }\r\n\r\n  _renderTitle() {\r\n    if (!this.props.title) return null;\r\n\r\n    const {\r\n      textContainerStyle,\r\n      hideLabelShadow,\r\n      offsetX,\r\n      parentSize,\r\n      size,\r\n      position,\r\n      spaceBetween\r\n    } = this.props;\r\n    const offsetTop = Math.max(size / 2 - TEXT_HEIGHT / 2, 0);\r\n    const positionStyles = { top: offsetTop };\r\n    const hideShadow = hideLabelShadow === undefined\r\n      ? this.props.hideShadow\r\n      : hideLabelShadow;\r\n\r\n    if (position !== \"center\") {\r\n      positionStyles[position] =\r\n        offsetX + (parentSize - size) / 2 + size + spaceBetween;\r\n    } else {\r\n      positionStyles.right = WIDTH / 2 + size / 2 + spaceBetween;\r\n    }\r\n\r\n    const textStyles = [\r\n      styles.textContainer,\r\n      positionStyles,\r\n      !hideShadow && shadowStyle,\r\n      textContainerStyle\r\n    ];\r\n\r\n    const title = (\r\n      React.isValidElement(this.props.title) ?\r\n        this.props.title\r\n      : (\r\n        <Text\r\n          allowFontScaling={false}\r\n          style={[styles.text, this.props.textStyle]}\r\n        >\r\n          {this.props.title}\r\n        </Text>\r\n      )\r\n    )\r\n\r\n    return (\r\n      <TextTouchable\r\n        background={touchableBackground(\r\n          this.props.nativeFeedbackRippleColor,\r\n          this.props.fixNativeFeedbackRadius\r\n        )}\r\n        activeOpacity={this.props.activeOpacity || DEFAULT_ACTIVE_OPACITY}\r\n        onPress={this.props.onPress}\r\n      >\r\n        <View style={textStyles}>\r\n          {title}\r\n        </View>\r\n      </TextTouchable>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  textContainer: {\r\n    position: \"absolute\",\r\n    paddingVertical: isAndroid ? 2 : 3,\r\n    paddingHorizontal: 8,\r\n    borderRadius: 3,\r\n    borderWidth: StyleSheet.hairlineWidth,\r\n    borderColor: \"#eee\",\r\n    backgroundColor: \"white\",\r\n    height: TEXT_HEIGHT\r\n  },\r\n  text: {\r\n    flex: 1,\r\n    fontSize: 12,\r\n    color: \"#444\"\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}